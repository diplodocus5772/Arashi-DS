Add the following line of code after "s.boot":

MIDIIn.connectAll;

//also\\

~soundBuf = Buffer.read(s,"*_*");

//where *_* is some sample you drag in before you run the code !!!\\

//also

~bpm = 20; //<--Set this to taste!-->
//~key=50.midicps;
~beat=60/~bpm;
//a-d are volum
~vol1=0.0;
~vol2=0.0;
~vol3=0.0;
~vol4=0.0;
~bassFreq=1;
~snareFreq=1;
~hatFreq=1;
~pitchLen=1;
//sequence of patterns to draw from
~duo = Pseq([~beat/2,~beat/2],1);
~trio = Pseq([~beat/3,~beat/3,~beat/3],1);
~quartet = Pseq([~beat/4,~beat/4,~beat/4,~beat/4,],1);
~quarToQuin = Pseq([~beat/4,~beat/4,~beat/4,~beat/8,~beat/8],1);
~quintet =  Pseq([~beat/5,~beat/5,~beat/5,~beat/5,~beat/5],1);
~quinToTrio =  Pseq([~beat/5,~beat/5,~beat/5,~beat/15,~beat/3],1);

---------------------------------------

//**Add the following after "Butter Synth" in the synthdefs section

//_patternPercussion
//--start--\\
//_kickDrum
SynthDef(\bass, { |choose=30, amp = 0.0, freq = 200,  peak = 180, peakdb = 0, length = 0.8, pan = 0 |
	var sound, filter, env,xenv, env2;
	env = Line.ar(1,0,length);
	xenv = XLine.ar(1,0.0001,length);
	env2 = XLine.ar(1,0.0001,length*3, doneAction: 2);
	sound = SinOsc.ar(freq*xenv, mul: env);
	filter =  BPeakEQ.ar(sound,peak, db:peakdb)+SinOsc.ar(freq/2*((env2/2.5)+0.5), mul:env2);
	Out.ar(choose,amp*Pan2.ar(filter,pan))
}).load(s);

//_snare
SynthDef(\snare, { |choose=30,amp=0.0, distortion = 0.9, filtFreq = 1000,peak = 8000, length = 0.3, pan=0 |
	var sound, filter, dist;
	//sound = PinkNoise.ar();
	sound = WhiteNoise.ar();
	filter = BBandPass.ar(sound,filtFreq);
	peak = BPeakEQ.ar(filter, peak,db:9);
	dist =
	  XLine.ar(1,0.0001,length, doneAction:2) * (Limiter.ar(peak,1-distortion,dur:0.0001)*(1/(1-distortion)));
	Out.ar(choose,amp*(Pan2.ar(dist,pan)))
}).load(s);

//_hiHat
SynthDef(\hat, { |choose=30,amp=0.0, distortion = 0.9, filtFreq = 8000, peak = 16000, length = 0.05 |
	var sound, filter, dist;
	sound = WhiteNoise.ar();
	filter = BBandPass.ar(sound,filtFreq);
	peak = BPeakEQ.ar(filter, peak,db:12) + SinOsc.ar(peak+Rand(-800,200),mul:0.22);
	dist =
	  XLine.ar(1,0.0001,length, doneAction:2) * (Limiter.ar(peak,1-distortion,dur:0.0001)*(1/(1-distortion)));
	Out.ar(choose,amp*Pan2.ar(dist))
}).load(s);

//_pitchBasedSynth
SynthDef(\pitch, {|choose=30,amp=0.0, freq = 8000, length = 0.04, pan = 0, soundmix=(-1)|
	var sound,soundAlt,soundMixed, verb, env;
	freq = freq+Rand(-40,60);
	env = EnvGen.kr(Env.new([1,1,0],[length,0]));
	sound = SinOsc.ar(XLine.kr(freq-20,freq,length/4.0),mul:env;);
	soundAlt=PlayBuf.ar(1,~soundBuf,freq/1000.0,1);
	soundMixed = XFade2.ar(sound,soundAlt,soundmix);
	Line.kr(dur:length, doneAction:2);
	Out.ar(choose,amp*Pan2.ar(soundMixed,pan))
}).load(s);
//_patternPercussion
//--end--\\

------------------------------------
//**Add the following at the end of the "instatiate synths" section

//START Instrument scores/midiControl for PatternPercussion

//_bassDrum
a = MIDIFunc.cc({ |value, num, chan, src|
	~vol1 = value.linlin(0, 127, 0.0001, 0.9) //control vol of bassdrum
}, 20);    //                            //with first slider on the MPD

e = MIDIFunc.cc({ |value, num, chan, src|
	~bassFreq = value.linexp(0, 127, 70, 400) //control bass drum frequency
},3);    //                                       //with K1 on MPD

	~bass=Pbind(
	\instrument, \bass,
	\dur, Pseq([~quintet,~quinToTrio,~trio],inf),//choose one of the rhythms
	\freq, Pfunc{~bassFreq},
	\pan,Pshuf([-0.1,0.1],inf),
	\vol, Pfunc{~vol1}
	).play;

//_snare

b = MIDIFunc.cc({ |value, num, chan, src|
	~vol2 = value.linlin(0, 127, 0.0001, 0.9) //control vol of snare
}, 21);    //                            //with second slider on the MPD

f = MIDIFunc.cc({ |value, num, chan, src|
	~snareFreq = value.linexp(0, 127, 500, 4000) //control snare filter band freq
},9);    //                                       //with K2 on MPD

~snarescore=Pseq([//why isn't this going??
	~snare=Pbind(
		\instrument, \snare,
		\dur, Pshuf([~trio,~duo,~duo,~quartet],inf),//choose one of the rhythms
		\filtFreq, Pfunc{~snareFreq},
		\distortion,Pseq((1..9)/10.0,inf),
		\pan,Pshuf([0.5,-0.5,0],inf),
		\vol, Pfunc{~vol2}
	),

],inf).play;

//_hiHat

c = MIDIFunc.cc({ |value, num, chan, src|
	~vol3 = value.linlin(0, 127, 0.0001, 0.9) //control vol of hiHat
}, 22);    //                            //with third slider on the MPD

g = MIDIFunc.cc({ |value, num, chan, src|
	~hatFreq = value.linexp(0, 127, 2000, 15000) //control hiHat filter band freq
},14);    //                                       //with K3 on MPD

~hatscore=Pseq([
	~hat=Pbind(
		\instrument, \hat,
		\dur, Pshuf([~quartet,~quintet,~quartet],inf),//choose one of the rhythms
		\filtFreq, Pfunc{~hatFreq},
		\distortion,Pseq((1..9)/10.0,inf),
		\pan,Pshuf([1,-1,0],inf),
		\vol, Pfunc{~vol3}
	),

],inf).play;

//_pitch

d = MIDIFunc.cc({ |value, num, chan, src|
	~vol4 = value.linlin(0, 127, 0.0001, 0.9) //control vol of pitch
}, 23);    //                            //with fourth slider on the MPD

h = MIDIFunc.cc({ |value, num, chan, src|
	~pitchLen = value.linlin(0, 127, 0.03, 0.3) //control pitch length
},15);    //                                       //with K4 on MPD

~pitchscore=Pseq([//why isn't this going??
	~pitch=Pbind(
		\instrument, \pitch,
		\dur, Pshuf([~quintet,~quinToTrio,~trio],inf),//choose one of the rhythms
		\length, Pfunc{~pitchLen},
		\freq, Pwrand([70,6020,7530,90040,10550], [0.15,1,4,1,4].normalizeSum, inf),
		\pan,Pshuf([1,-1,0],inf),
		\soundmix,Pshuf([-1,-1,0.5,0],inf),
		\vol, Pfunc{~vol4}
	),

],inf).play;


//END Instrument scores for PatternPercussion
